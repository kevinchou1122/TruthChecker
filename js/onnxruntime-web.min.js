// ONNX Runtime Web stub implementation that works with Chrome extensions
(function(global) {
  // Create the ort namespace
  global.ort = {
    // Environment configuration
    env: {
      wasm: {
        wasmPaths: {},
        numThreads: 1,
        simd: true
      },
      debug: false,
      logLevel: 'warning'
    },
    
    // Tensor implementation
    Tensor: function(type, data, dims) {
      this.type = type;
      this.data = data instanceof Int32Array || data instanceof Float32Array ? 
                 data : 
                 (type.includes('int') ? new Int32Array(data) : new Float32Array(data));
      this.dims = dims;
      
      return this;
    },
    
    // Session class
    InferenceSession: {
      create: async function(modelPath, options = {}) {
        console.log(`[ONNX] Creating inference session for model: ${modelPath}`);
        console.log(`[ONNX] With options:`, options);
        
        // Mock delay to simulate model loading
        await new Promise(resolve => setTimeout(resolve, 500));
        
        // Return a session object with run method
        return {
          inputNames: ['input_ids', 'attention_mask'],
          outputNames: ['output'],
          
          async run(feeds) {
            console.log(`[ONNX] Running inference with feeds:`, feeds);
            
            // Validate inputs
            if (!feeds.input_ids || !feeds.attention_mask) {
              throw new Error("Missing required inputs: input_ids and/or attention_mask");
            }
            
            // Get the batch size and sequence length from input shapes
            const inputDims = feeds.input_ids.dims;
            const batchSize = inputDims[0];
            const seqLength = inputDims[1];
            
            console.log(`[ONNX] Input dimensions: batch=${batchSize}, sequence=${seqLength}`);
            
            // Generate mock logits for binary classification: [false_prob, true_prob]
            const outputData = new Float32Array([0.2, 0.8]);
            const outputTensor = {
              data: outputData,
              dims: [1, 2]
            };
            
            // Return the results with the output tensor
            return {
              output: outputTensor
            };
          }
        };
      }
    }
  };
  
  console.log("[ONNX] Runtime Web stub initialized successfully");
})(self);